package dk.dmi.lib.workflow.component.xml;

import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;

import dk.dmi.lib.workflow.common.BaseComponent;
import dk.dmi.lib.workflow.common.WorkflowAnnotations;
import dk.dmi.lib.workflow.common.WorkflowAnnotations.ArgumentListGetMethod;
import dk.dmi.lib.workflow.common.WorkflowAnnotations.Component;
import dk.dmi.lib.workflow.common.WorkflowAnnotations.ExecuteMethod;

import javax.xml.stream.XMLInputFactory;
import javax.xml.stream.XMLOutputFactory;
import javax.xml.stream.XMLStreamReader;
import javax.xml.stream.XMLStreamWriter;
import javax.xml.transform.Result;
import javax.xml.transform.Source;
import javax.xml.transform.TransformerFactory;
import javax.xml.transform.stax.StAXResult;
import javax.xml.transform.stax.StAXSource;

import de.odysseus.staxon.json.JsonXMLConfig;
import de.odysseus.staxon.json.JsonXMLConfigBuilder;
import de.odysseus.staxon.json.JsonXMLInputFactory;
import de.odysseus.staxon.json.JsonXMLOutputFactory;
import de.odysseus.staxon.xml.util.PrettyXMLStreamWriter;

@Component(
		name = "XML/JSON converter", 
		category = "Xml",
		description = "Convert text between XML and JSON formats. When converting xml to json, its possible to auto generate the json array by enabling autoArray. Xml list that hold only one value will be converted to a single value in json. "
				+ "To force the creation of json lists, multiplePI must be enabled and processing instructions can then be defined in the xml document using xml-multiple (e.g. <?xml-multiple someElement?><someElement ...>). If all xml-multiple "
				+ "processing instructions are defined in the xml, autoArray can be disabled as it will greatly reduce procissing time. If multiplePI is enabled when converting from json to xml, the processing instructions will also be generated "
				+ "in the xml automaticly.",
		version = 2)
public class XmlJsonConverter2 extends BaseComponent {
	public static String XML_TO_JSON = "XML to JSON";
	public static String JSON_TO_XML = "JSON to XML";
	
	@ArgumentListGetMethod(
			argumentIndex = "0")
	public String[] getListOfFormats(String ignore) {
		String[] formats = {XML_TO_JSON, JSON_TO_XML};
		return formats;
	}
	
	@ExecuteMethod(
			argumentDisplayTypes = {WorkflowAnnotations.ARGUMENT_DISPLAY_TYPE_LIST, WorkflowAnnotations.ARGUMENT_DISPLAY_TYPE_TEXT, WorkflowAnnotations.ARGUMENT_DISPLAY_TYPE_CHECK_BOX, WorkflowAnnotations.ARGUMENT_DISPLAY_TYPE_CHECK_BOX, WorkflowAnnotations.ARGUMENT_DISPLAY_TYPE_CHECK_BOX},
			argumentDescriptions = {"Format to convert from and to", "Text to convert", "Should json arrays be generated automatically", "Are there xml-multiple processing instructions in the xml when converting to json, or should they be autogenerated when converting to xml", "Should result text be formatted to a human readeble print."}, 
			returnDescription = "Formated text")
	public String execute(String formatToFormat, String text, boolean autoArray, boolean multiplePI, boolean prettyPrint) throws Exception {
		String resultText = null;
		
		if(XML_TO_JSON.equals(formatToFormat)) {
			resultText = convertXmlToJson(text,  autoArray, multiplePI, prettyPrint);
		} else if(JSON_TO_XML.equals(formatToFormat)) {
			resultText = convertJsonToXml(text, multiplePI, prettyPrint);
		} else {
			throw new Exception("Component XmlJsonConverter, wrong format configuration!");
		}
		
		return resultText;
	}
	
	String convertXmlToJson(String xmlText, boolean autoArray, boolean multiplePI, boolean prettyPrint) throws Exception {
		String resultJsomText = null;
		ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(xmlText.getBytes());
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		
		JsonXMLConfig config = new JsonXMLConfigBuilder()
		.autoArray(autoArray)
		.multiplePI(multiplePI)
		.prettyPrint(prettyPrint)
		.build();
		
		try {
			XMLStreamReader reader = XMLInputFactory.newInstance().createXMLStreamReader(byteArrayInputStream);
			Source source = new StAXSource(reader);
			
			XMLStreamWriter writer = new JsonXMLOutputFactory(config).createXMLStreamWriter(byteArrayOutputStream);
			Result result = new StAXResult(writer);
			
			TransformerFactory.newInstance().newTransformer().transform(source, result);
			resultJsomText = byteArrayOutputStream.toString("UTF-8");
		} finally {
			byteArrayOutputStream.close();
			byteArrayInputStream.close();
		}
		
		return resultJsomText;
	}
	
	String convertJsonToXml(String jsonText, boolean multiplePI, boolean prettyPrint) throws Exception {
		String resultXmlText = null;
		ByteArrayInputStream byteArrayInputStream = new ByteArrayInputStream(jsonText.getBytes("UTF-8"));
		ByteArrayOutputStream byteArrayOutputStream = new ByteArrayOutputStream();
		
		try {
			XMLInputFactory inputFactory = new JsonXMLInputFactory();
			
			inputFactory.setProperty(JsonXMLInputFactory.PROP_MULTIPLE_PI, multiplePI);
			Source source = new StAXSource(inputFactory.createXMLStreamReader(byteArrayInputStream));
			
			XMLOutputFactory outputFactory = XMLOutputFactory.newInstance();
			XMLStreamWriter writer = outputFactory.createXMLStreamWriter(byteArrayOutputStream);
			
			if(prettyPrint) {
				writer = new PrettyXMLStreamWriter(writer);
			}
			
			Result result = new StAXResult(writer);
			
			TransformerFactory transformerFactory = TransformerFactory.newInstance();
			transformerFactory.newTransformer().transform(source, result);
			resultXmlText = byteArrayOutputStream.toString("ISO-8859-1");
		} finally {
			byteArrayOutputStream.close();
			byteArrayInputStream.close();
		}
		
		return resultXmlText;
	}
	
}
